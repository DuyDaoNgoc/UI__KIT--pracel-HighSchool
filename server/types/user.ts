// server/types/user.ts
import { ObjectId } from "mongodb";

/**
 * Vai tr√≤ user (Role)
 * - D√πng chung cho c·∫£ BE v√† FE
 */
export type Role = "student" | "teacher" | "admin" | "parent";

/* ===========================================================
   ===== Interface c∆° b·∫£n cho User =====
   - ƒê√¢y l√† model d·ªØ li·ªáu user chung (BE <-> FE mapping)
   - Kh√¥ng b·∫Øt bu·ªôc m·ªçi field ƒë·ªÅu t·ªìn t·∫°i (h·∫ßu h·∫øt optional)
   =========================================================== */
export interface IUser {
  // ===== ID & ƒë·ªãnh danh =====
  _id?: ObjectId | string; // DB c√≥ ObjectId, FE th∆∞·ªùng d√πng string
  studentId?: string; // m√£ h·ªçc sinh (STU-xxxxx)
  teacherId?: string | null; // m√£ gi√°o vi√™n (TEA-xxxxx)
  parentId?: string | null; // m√£ ph·ª• huynh (PAR-xxxxx)
  customId?: string; // id do h·ªá th·ªëng t√πy bi·∫øn

  // ===== Th√¥ng tin c∆° b·∫£n =====
  username: string; // t√™n ƒëƒÉng nh·∫≠p / hi·ªÉn th·ªã ch√≠nh
  email?: string; // email (optional)
  password?: string; // m·∫≠t kh·∫©u (ch·ªâ l∆∞u server)
  role: Role; // vai tr√≤ user
  name?: string; // t√™n ƒë·∫ßy ƒë·ªß (th√™m ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi ch·ªó d√πng `name`)

  // ===== Th√¥ng tin c√° nh√¢n =====
  dob?: Date | string; // ng√†y sinh
  gender?: "Nam" | "N·ªØ" | "other"; // gi·ªõi t√≠nh
  phone?: string;
  address?: string;
  residence?: string;
  avatar?: string; // url avatar
  createdAt?: Date; // timestamp (server s·∫Ω set)

  // ===== Th√¥ng tin l·ªõp / h·ªçc t·∫≠p =====
  // L∆∞u c√°c tr∆∞·ªùng li√™n quan l·ªõp/h·ªá h·ªçc ƒë·ªÉ controller c√≥ th·ªÉ truy xu·∫•t tr·ª±c ti·∫øp
  class?: string; // classLetter (nh∆∞ "A") - alias c≈©
  classCode?: string; // m√£ l·ªõp ƒë·∫ßy ƒë·ªß (v√≠ d·ª• "10A1CNTT")
  classLetter?: string; // k√Ω hi·ªáu l·ªõp (A, B, C...)
  major?: string; // chuy√™n ng√†nh / t·ªï h·ª£p m√¥n
  grade?: string; // kh·ªëi (v√≠ d·ª• "10", "11")
  schoolYear?: string; // ni√™n kh√≥a (v√≠ d·ª• "2024-2025")
  teacherName?: string; // t√™n gi√°o vi√™n ƒë∆∞·ª£c ƒë·ªìng b·ªô nhanh (string)

  // ===== Quan h·ªá & con c√°i =====
  children?: (ObjectId | string)[]; // danh s√°ch con (v·ªõi parent role)

  // ===== ƒêi·ªÉm & h·ªçc t·∫≠p =====
  grades?: { subject: string; score: number }[];
  creditsTotal?: number;
  creditsEarned?: number;

  // ===== Th·ªùi kho√° bi·ªÉu =====
  schedule?: {
    day: string;
    subject: string;
    startTime: string;
    endTime: string;
  }[];

  // ===== H·ªçc ph√≠ =====
  tuitionTotal?: number;
  tuitionPaid?: number;
  tuitionRemaining?: number;

  // ===== B·∫£o m·∫≠t / kh√≥a t√†i kho·∫£n =====
  loginAttempts?: number; // s·ªë l·∫ßn login th·∫•t b·∫°i
  lockUntil?: number; // timestamp ƒë·∫øn khi t√†i kho·∫£n b·ªã kh√≥a
}

/* ===========================================================
   ===== Interface Mongoose Document =====
   - Gi·ªØ k·∫ø th·ª´a IUser nh∆∞ c·∫•u tr√∫c c·ªßa b·∫°n
   - N·∫øu c·∫ßn, c√≥ th·ªÉ m·ªü r·ªông th√™m Document c·ªßa mongoose sau n√†y
   =========================================================== */
export interface IUserDocument extends IUser {} // k·∫ø th·ª´a IUser

/* ===========================================================
   ===== Input khi t·∫°o user =====
   - Ki·ªÉu d·ªØ li·ªáu d√πng cho API create user
   - Gi·ªØ t∆∞∆°ng t·ª± IUser nh∆∞ng lo·∫°i b·ªè _id/createdAt/children raw
   =========================================================== */
export interface CreateUserInput {
  studentId?: string;
  teacherId?: string | null;
  parentId?: string | null;
  customId?: string;
  username: string;
  email?: string;
  password?: string;
  role?: Role;
  dob?: Date | string;
  class?: string; // classLetter
  schoolYear?: string;
  grade?: string;
  phone?: string;
  address?: string;
  residence?: string;
  avatar?: string;
  createdAt?: Date;
  children?: string[];
  grades?: { subject: string; score: number }[];
  creditsTotal?: number;
  creditsEarned?: number;
  schedule?: {
    day: string;
    subject: string;
    startTime: string;
    endTime: string;
  }[];
  tuitionTotal?: number;
  tuitionPaid?: number;
  tuitionRemaining?: number;

  // üéØ L∆∞u √Ω: ·ªü ƒë√¢y l√† ki·ªÉu d·ªØ li·ªáu (number), kh√¥ng ph·∫£i schema definition
  loginAttempts?: number;
  lockUntil?: number;
}

/* ===========================================================
   ===== SafeUser tr·∫£ v·ªÅ FE =====
   - Lo·∫°i b·ªè password, _id lu√¥n string, children lu√¥n array string
   =========================================================== */
export type SafeUser = Omit<IUser, "password" | "_id" | "children"> & {
  _id: string; // lu√¥n string
  children: string[]; // lu√¥n m·∫£ng string (kh√¥ng null)
  teacherId?: string | null;
  parentId?: string | null;
};

/* ===========================================================
   ===== Convert IUser -> SafeUser =====
   - H√†m ti·ªán √≠ch chuy·ªÉn ObjectId -> string, x·ª≠ l√Ω default values
   - Nh·∫≠n `user` c√≥ _id ki·ªÉu ObjectId ƒë·ªÉ ch·∫Øc ch·∫Øn convert ƒë√∫ng
   =========================================================== */
export const toSafeUser = (user: IUser & { _id: ObjectId }): SafeUser => ({
  _id: user._id.toString(),
  studentId: user.studentId,
  teacherId: user.teacherId ?? null,
  parentId: user.parentId ?? null,
  customId: user.customId || "",
  username: user.username,
  email: user.email || "",
  role: user.role,
  name: user.name || "",
  dob: user.dob,
  class: user.class,
  // --- c√°c tr∆∞·ªùng l·ªõp/h·ªçc t·∫≠p ƒë·∫ßy ƒë·ªß ƒë·ªÉ controller d√πng ---
  classCode: (user as any).classCode || undefined,
  classLetter: (user as any).classLetter || undefined,
  major: (user as any).major || undefined,
  grade: user.grade,
  schoolYear: user.schoolYear,
  teacherName: (user as any).teacherName || undefined,
  // --- li√™n h·ªá v√† c√° nh√¢n ---
  phone: user.phone,
  address: user.address,
  residence: user.residence,
  avatar: user.avatar,
  createdAt: user.createdAt || new Date(),
  // children: convert ObjectId -> string n·∫øu c·∫ßn
  children: user.children?.map((c) => c.toString()) || [],
  // --- h·ªçc t·∫≠p ---
  grades: user.grades || [],
  creditsTotal: user.creditsTotal || 0,
  creditsEarned: user.creditsEarned || 0,
  schedule: user.schedule || [],
  // --- h·ªçc ph√≠ ---
  tuitionTotal: user.tuitionTotal || 0,
  tuitionPaid: user.tuitionPaid || 0,
  tuitionRemaining: user.tuitionRemaining || 0,
});
